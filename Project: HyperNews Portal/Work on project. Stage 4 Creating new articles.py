'''
Description
Youâ€™re storing your news data in a JSON file. Yet editing this file every time you want to add a news article is inconvenient. You need to add a web interface for creating news articles.

Objectives
Create a new page to add news using a form. This form should send data via POST to /news/create/ where a new record will be created with two parameters, title and text. When the request is completed, the response should redirect you back to the main page.

If you start the application on your computer with the command python manage.py runserver, the page for creating news should be available at the address localhost:8000/news/create/ address.

The page should also contain a link to the main page with target="_blank" target="_blank" href="/news/".

The link in your storage should be a random number, but remember that it must be unique for every news article. Use the current time to populate the created field, and do not forget to convert it to a string before saving it to JSON.
'''

manage.py
#!/usr/bin/env python
"""Django's command-line utility for administrative tasks."""
import os
import sys


def main():
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'hypernews.settings')
    try:
        from django.core.management import execute_from_command_line
    except ImportError as exc:
        raise ImportError(
            "Couldn't import Django. Are you sure it's installed and "
            "available on your PYTHONPATH environment variable? Did you "
            "forget to activate a virtual environment?"
        ) from exc
    execute_from_command_line(sys.argv)


if __name__ == '__main__':
    main()
news/tests.py
from django.test import TestCase

# Create your tests here.
news/__init__.py
news/templates/news/articles.html
{% extends 'news/base.html' %}

{% block title %}{{ block.super }}{% endblock %}

{% block content %}
    <h2>Hyper news</h2>
    {% for article in articles %}
        <h4>{{ article.0 }}</h4>
            <ul>
                {% for a in article.1 %}
                    <li><a href="/news/{{ a.link }}/">{{ a.title }}</a></li>
                {% endfor %}
            </ul>
    {% endfor %}
    <a href="/news/create/"></a>
{% endblock %}
news/apps.py
from django.apps import AppConfig


class NewsConfig(AppConfig):
    name = 'news'
news/templates/news/article.html
{% extends 'news/base.html' %}

{% block title %}{{ block.super }}{% endblock %}

{% block content %}
    <h2>{{ article.title }}</h2>
    <p>{{ article.created }}</p>
    <p>{{ article.text }}</p>
    <a href="/news/">News</a>
{% endblock %}
news/migrations/__init__.py
news/models.py
from django.db import models

# Create your models here.
hypernews/settings.py
"""
Django settings for hypernews project.

Generated by 'django-admin startproject' using Django 2.2.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

NEWS_JSON_PATH = os.path.join(BASE_DIR, 'hypernews', 'news.json')  # You can choose any path you want
NEWS_JSON_PATH = os.environ.get('NEWS_JSON_PATH') or NEWS_JSON_PATH  # DO NOT MODIFY THIS LINE

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '(-q5783z2mh-cd217skey@(+_np2&j0=sl6suvo)ah2uwz@9ij'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['localhost', '127.0.0.1']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'news',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'hypernews.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'hypernews.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}

# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.2/howto/static-files/

STATIC_URL = '/static/'
news/views.py
import json
import simplejson
from collections import defaultdict
from datetime import datetime

from django.conf import settings
from django.http import Http404
from django.shortcuts import render, redirect
from django.views import View


# Create your views here.
class CommingSoonView(View):
    def get(self, request, *args, **kwargs):
        return render(
            request, 'news/coming.html'
        )


class CreateNewView(View):
    def post(self, request, *args, **kwargs):
        title = request.POST.get('title')
        text = request.POST.get('text')
        with open(settings.NEWS_JSON_PATH, 'r', encoding='utf-8') as file:
            data_from_json = list(json.load(file))
            new = {'text': text, 'title': title, 'link': 9234732 + len(data_from_json),
                   'created': datetime.strftime(datetime.now(), '%Y-%m-%d %H:%M:%S')}
            data_from_json.append(new)

        with open(settings.NEWS_JSON_PATH, 'w') as json_file:
            json_file.write(simplejson.dumps(data_from_json, ensure_ascii=False, encoding="utf-8"))

        return redirect('/news')

    def get(self, request, *args, **kwargs):
        return render(
            request, 'news/new.html'
        )

class NewView(View):
    def get(self, request, *args, **kwargs):
        with open(settings.NEWS_JSON_PATH, 'r') as file:
            data_from_json = json.load(file)
            sorted_dates = sorted(data_from_json, key=lambda i: i['created'][:10], reverse=True)
            ddict = defaultdict(list)
            for obj in sorted_dates:
                ddict[obj['created'][:10]].append({'link': obj['link'], 'title': obj['title']})
            result = [{'date': k, 'list': v} for k, v in ddict.items()]
        return render(
            request, 'news/index.html',
            {'data': result}
        )


class NewDetailView(View):
    def get(self, request, *args, **kwargs):
        try:
            link = kwargs['link']
        except ValueError:
            raise Http404

        the_entry = None
        with open(settings.NEWS_JSON_PATH, 'r') as file:
            file_contents = file.read()
            json_contents = json.loads(file_contents)
            for entry in json_contents:
                if entry['link'] == link:
                    the_entry = entry
                    break
        return render(
            request, 'news/detail.html',
            {'new': the_entry}
        )
news/templates/news/base.html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>{% block title %}Hyper News{% endblock %}</title>
</head>
<body>
    {% block content %}
    {% endblock %}
</body>
</html>
hypernews/news.json
[{"created": "2020-02-22 16:40:00", "text": "A new star appeared in the sky.", "title": "A star is born", "link": 9234732}, {"created": "2020-02-09 14:15:10", "text": "Text of the news 1", "title": "News 1", "link": 1}, {"created": "2020-02-10 14:15:10", "text": "Text of the news 2", "title": "News 2", "link": 2}, {"created": "2020-02-09 16:15:10", "text": "Text of the news 3", "title": "News 3", "link": 3}]
news/admin.py
from django.contrib import admin

# Register your models here.
hypernews/wsgi.py
"""
WSGI config for hypernews project.

It exposes the WSGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/howto/deployment/wsgi/
"""

import os

from django.core.wsgi import get_wsgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'hypernews.settings')

application = get_wsgi_application()
hypernews/__init__.py
hypernews/urls.py
"""hypernews URL Configuration

The `urlpatterns` list routes URLs to views. For more information please see:
    https://docs.djangoproject.com/en/2.2/topics/http/urls/
Examples:
Function views
    1. Add an import:  from my_app import views
    2. Add a URL to urlpatterns:  path('', views.home, name='home')
Class-based views
    1. Add an import:  from other_app.views import Home
    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')
Including another URLconf
    1. Import the include() function: from django.urls import include, path
    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))
"""
from django.contrib import admin
from django.urls import include, path
from news.views import CommingSoonView, CreateNewView, NewDetailView, NewView

urlpatterns = [
    path('admin/', admin.site.urls),
    path('', CommingSoonView.as_view()),
    path('news/', NewView.as_view()),
    path(r'news/<int:link>/', NewDetailView.as_view()),
    path('news/create/', CreateNewView.as_view()),
]
news/templates/news/index.html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Hyper News</title>
</head>
<body>
    <h2>Hyper news</h2>

    {% for entry in data %}
        <h4>{{ entry.date }}</h4>

        <ul>
            {% for subentry in entry.list %}
                <li><a href="/news/{{ subentry.link }}/">{{ subentry.title }}</a></li>
            {% endfor %}
        </ul>
    {% endfor %}

    <br />
    <a href="/news/create/">Add your own new.</a>
</body>
</html>
news/templates/news/coming.html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Coming soon</title>
</head>
<body>
    <h1>Coming soon!</h1>
</body>
</html>
news/templates/news/detail.html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>New's Detail</title>
</head>
<body>
    <h2> {{ new.title }} </h2>
    <p> {{ new.created }} </p>
    <p> {{ new.text }} </p>

    <br />
    <a href="/news/">Go to the main page.</a>
</body>
</html>
news/templates/news/new.html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
  <head>
    <title>HTML form</title>
  </head>
  <body>
    <form method="POST">
      {% csrf_token %}
      <p>Title:</p>
      <input type="text" name="title">
      <p>Text:</p>
      <input type="text" name="text" style="padding-right: 4px">
      <button type="submit">Send</button>
      <p><a href="/news/">Go back!</a>
      </p>
    </form>
  </body>
</html>