''''
Description
You keep adding news and everything is going great. Now there is so much news on your site that you need a way to search for articles. You decide to add search functionality to your site.

Objectives
Add a search form to your main page with one input element with the name q. The form should send GET requests to the same /news/ page. The format of the result page stays the same but includes only articles whose titles match the search term.

Remember the "Coming soon" page? Now your site is complete and all requests to that page should be redirected to the main page at localhost:8000/news/.

Great job!

Extra
This optional step is NOT part of the assessment. In this step, you will make your news website a little prettier using CSS. If you followed the requirements for page layouts, you can stylize your site by adding the base.css file to your project.

Create the path static/css in the root of your project and put the base.css file there. Then paste the following code at the top of each page template:

{% load static %}
<link rel="stylesheet" href="{% static 'css/base.css' %}">
Tweak your settings a little:

DEBUG = True
 
STATIC_URL = "/static/"
STATICFILES_DIRS = [os.path.join(BASE_DIR, "static")]
Add an URL pattern to match static content:

from django.conf import settings
from django.conf.urls.static import static
  
urlpatterns += static(settings.STATIC_URL)
Launch your application again, and check out the result!

You can play around with the style rules in the static/css/base.css file and see what you can get!
'''

manage.py
#!/usr/bin/env python
"""Django's command-line utility for administrative tasks."""
import os
import sys


def main():
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'hypernews.settings')
    try:
        from django.core.management import execute_from_command_line
    except ImportError as exc:
        raise ImportError(
            "Couldn't import Django. Are you sure it's installed and "
            "available on your PYTHONPATH environment variable? Did you "
            "forget to activate a virtual environment?"
        ) from exc
    execute_from_command_line(sys.argv)


if __name__ == '__main__':
    main()
news/templates/news/index.html
  
{% extends "news/base.html" %}
{% block content %}
        <div>Coming soon</div>
        <a href="/news/">News</a>
{% endblock %} 
hypernews/settings.py
"""
Django settings for hypernews project.
Generated by 'django-admin startproject' using Django 2.2.
For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/
For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

NEWS_JSON_PATH = 'news.json'  # You can choose any path you want
NEWS_JSON_PATH = os.environ.get('NEWS_JSON_PATH') or NEWS_JSON_PATH  # DO NOT MODIFY THIS LINE

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '(-q5783z2mh-cd217skey@(+_np2&j0=sl6suvo)ah2uwz@9ij'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'news',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'hypernews.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'hypernews.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}


# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.2/howto/static-files/

STATIC_URL = '/static/'
news/templates/news/base.html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>{% block title %} Hyper News {% endblock %}</title>
</head>
<body>
    {% block content %}{% endblock %}
</body>
</html>
hypernews/wsgi.py
"""
WSGI config for hypernews project.
It exposes the WSGI callable as a module-level variable named ``application``.
For more information on this file, see
https://docs.djangoproject.com/en/2.2/howto/deployment/wsgi/
"""

import os

from django.core.wsgi import get_wsgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'hypernews.settings')

application = get_wsgi_application()
hypernews/__init__.py
hypernews/urls.py
"""hypernews URL Configuration
The `urlpatterns` list routes URLs to views. For more information please see:
    https://docs.djangoproject.com/en/2.2/topics/http/urls/
Examples:
Function views
    1. Add an import:  from my_app import views
    2. Add a URL to urlpatterns:  path('', views.home, name='home')
Class-based views
    1. Add an import:  from other_app.views import Home
    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')
Including another URLconf
    1. Import the include() function: from django.urls import include, path
    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))
"""
from django.contrib import admin
from django.urls import path, include
from .views import *

urlpatterns = [
    path('admin/', admin.site.urls),
    path('news/', include('news.urls')),
    path('', Main.as_view())
]
news/templates/news/all_news.html
{% extends "news/base.html" %}
{% block content %}
    <h2>Hyper news</h2>
    <form method="get">
        <input name="q">
        <button type="submit">Search</button>
    </form>
    {% for date, dict in news.items %}
        <h4>{{ date }}</h4>
        <ul>
        {% for link, news_title in dict.items %}
            <li><a href="/news/{{ link }}/">{{ news_title }}</a></li>
        {% endfor %}
        </ul>
    {% endfor %}
    <a href="/news/create/">Create News</a>
{% endblock %}
hypernews/views.py
from django.shortcuts import redirect
from django.views import View


class Main(View):
    def get(self, request):
        return redirect('news/')
news/urls.py
from django.urls import path
from .views import *

urlpatterns = [
    path('create/', CreateNews.as_view()),
    path('<int:link>/', OneNews.as_view()),
    path('', AllNews.as_view())
]
news/migrations/__init__.py
news/__init__.py
news/admin.py
from django.contrib import admin

# Register your models here.
news/apps.py
from django.apps import AppConfig


class NewsConfig(AppConfig):
    name = 'news'
news/models.py
from django.db import models
news/tests.py
from django.test import TestCase

# Create your tests here.
news/views.py
from django.shortcuts import render, redirect
from django.views import View
from django.conf import settings
import json
from datetime import datetime


class ComingSoon(View):
    def get(self, request):
        return render(request, 'news/coming_soon.html')


class Main(View):
    def get(self, request):
        return redirect('news/')


class OneNews(View):
    def get(self, request, link):
        context = self.get_one_new(link)
        return render(request, 'news/one_news.html', context=context)

    def get_one_new(self, link):
        file_path = getattr(settings, 'NEWS_JSON_PATH')
        with open(file_path) as json_file:
            file = json.load(json_file)
            for dict_news in file:
                if dict_news['link'] == link:
                    return dict_news
            return None


class AllNews(View):
    def get(self, request):
        q = request.GET.get('q', None)
        filter_news = None
        if q is not None:
            filter_news = self.search(q)
        context = self.get_all_news(filter_news)
        return render(request, 'news/all_news.html', context=context)

    def search(self, q):
        file_path = getattr(settings, 'NEWS_JSON_PATH')
        with open(file_path) as json_file:
            file = json.load(json_file)
            result = []
            for dict_news in file:
                if q in dict_news['title'] or q in dict_news['text']:
                    result.append(dict_news)
        return result

    def get_all_news(self, filter_news):
        if filter_news is None:
            file_path = getattr(settings, 'NEWS_JSON_PATH')
            with open(file_path) as json_file:
                file = json.load(json_file)
        else:
            file = filter_news
        dates = []
        for dict_news in file:
            date = dict_news['created'][:10]
            int_date = int(date.replace('-', ''))
            if date in dates:
                continue
            dates.append(int_date)
        dates.sort(reverse=True)

        new_dict = {}
        for date in dates:
            key = f'{str(date)[:4]}-{str(date)[4:6]}-{str(date)[6:]}'
            value = []
            for dict_news in file:
                if dict_news['created'][:10] == key:
                    value.append((dict_news['link'], dict_news['title']))
            new_dict[key] = dict(value)
        result = {'news': new_dict}
        return result


class CreateNews(View):
    def get(self, request):
        return render(request, 'news/create_news.html')

    def post(self, request):
        file_path = getattr(settings, 'NEWS_JSON_PATH')
        with open(file_path) as json_file:
            file = json.load(json_file)
        links = [dic['link'] for dic in file]
        link = max(links) + 1
        date = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        title = request.POST.get('title')
        text = request.POST.get('text')
        dictionary = {'created': date,
                      'text': text,
                      'title': title,
                      'link': link}
        file.append(dictionary)

        with open(file_path, 'w') as json_file:
            json.dump(file, json_file)

        return redirect('/news/')
news/templates/news/create_news.html
{% extends "news/base.html" %}
{% block title %}Create new one{% endblock %}
{% block content %}
    <h2>Hyper news</h2>
    <form method="post">{% csrf_token %}
        <p>Title</p>
        <p>
            <label>
                <input name="title">
            </label>
        </p>
        <p>Text</p>
        <p>
            <label>
                <textarea name="text"></textarea>
            </label>
        </p>
        <p><button type="submit">Create</button></p>
    </form>
    <a href="/news/">News</a>
{% endblock %} 
news/templates/news/main.html
{% extends "news/base.html" %}
{% block content %}
        <a href="/news/">News</a>
{% endblock %} 
news/templates/news/one_news.html
{% extends "news/base.html" %}
{% block title %}
{{ title }}
{% endblock %}
{% block content %}
    <h2>{{ title }}</h2>
    <p>{{ created }}</p>
    <p>{{ text }}</p>
    <a href="/news/">News</a>
    <a href="/news/">News</a>
{% endblock %}